// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: databricks.proto

package protos

import (
	_ "github.com/mlflow/mlflow-go/pkg/protos/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Visibility defines who is allowed to use the RPC.
type Visibility int32

const (
	// Public indicates visible to both external and internal customers.
	Visibility_PUBLIC Visibility = 1
	// Internal is only available to Databricks-internal clients.
	Visibility_INTERNAL Visibility = 2
	// Public-undocumented are accessible via public endpoints, but not documented. This is useful
	// for internal clients that depend on public endpoints (e.g. workflows running in the driver).
	Visibility_PUBLIC_UNDOCUMENTED Visibility = 3
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		1: "PUBLIC",
		2: "INTERNAL",
		3: "PUBLIC_UNDOCUMENTED",
	}
	Visibility_value = map[string]int32{
		"PUBLIC":              1,
		"INTERNAL":            2,
		"PUBLIC_UNDOCUMENTED": 3,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_databricks_proto_enumTypes[0].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_databricks_proto_enumTypes[0]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Visibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Visibility(num)
	return nil
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	// Internal error. This means that some invariants expected by the underlying system have been
	// broken. This error code is reserved for serious errors, which generally cannot be resolved
	// by the user.
	//
	// Prefer this over all kinds of detailed error messages (e.g IO_ERROR), unless there's some
	// automation that relies on the custom error code.
	//
	// Maps to:
	// - google.rpc.Code: INTERNAL = 13;
	// - HTTP code: 500 Internal Server Error
	ErrorCode_INTERNAL_ERROR ErrorCode = 1
	// The service is currently unavailable. This is most likely a transient condition, which can be
	// corrected by retrying with a backoff. Note that it is not always safe to retrynon-idempotent
	// operations.
	//
	// Prefer this over SERVICE_UNDER_MAINTENANCE, WORKSPACE_TEMPORARILY_UNAVAILABLE.
	//
	// Maps to:
	// - google.rpc.Code: UNAVAILABLE = 14;
	// - HTTP code: 503 Service Unavailable
	ErrorCode_TEMPORARILY_UNAVAILABLE ErrorCode = 2
	// Indicates that an IOException has been internally thrown.
	ErrorCode_IO_ERROR ErrorCode = 3
	// The request is invalid. Prefer more specific error code whenever possible.
	// Also see similar recommendation for the google.rpc.Code.FAILED_PRECONDITION.
	//
	// Prefer this error code over MALFORMED_REQUEST, INVALID_STATE, UNPARSEABLE_HTTP_ERROR.
	//
	// Maps to:
	// - google.rpc.Code: FAILED_PRECONDITION = 9;
	// - HTTP code: 400 Bad Request
	ErrorCode_BAD_REQUEST ErrorCode = 4
	// An external service is unavailable temporarily as it is being updated/re-deployed. Indicates
	// gateway proxy to safely retry the request.
	ErrorCode_SERVICE_UNDER_MAINTENANCE ErrorCode = 5
	// A workspace is temporarily unavailable as the workspace is being re-assigned.
	ErrorCode_WORKSPACE_TEMPORARILY_UNAVAILABLE ErrorCode = 6
	// The deadline expired before the operation could complete. For operations that change the state
	// of the system, this error may be returned even if the operation has completed successfully.
	// For example, a successful response from a server could have been delayed long enough for
	// the deadline to expire. When possible - implementations should make sure further processing of
	// the request is aborted, e.g. by throwing an exception instead of making the RPC request,
	// making the database query, etc.
	//
	// Maps to:
	// - google.rpc.Code: DEADLINE_EXCEEDED = 4;
	// - HTTP code: 504 Gateway Timeout
	ErrorCode_DEADLINE_EXCEEDED ErrorCode = 7
	// The operation was canceled by the caller. An example - client closed the connection without
	// waiting for a response.
	//
	// Maps to:
	// - google.rpc.Code: CANCELLED = 1;
	// - HTTP code: 499 Client Closed Request
	ErrorCode_CANCELLED ErrorCode = 8
	// Operation is rejected due to throttling, e.g. some resource has been exhausted, per-user quota
	// triggered, or the entire file system is out of space.
	//
	// Maps to:
	// - google.rpc.Code: RESOURCE_EXHAUSTED = 8;
	// - HTTP code: 429 Too Many Requests
	ErrorCode_RESOURCE_EXHAUSTED ErrorCode = 9
	// The operation was aborted, typically due to a concurrency issue such as a sequencer
	// check failure, transaction abort, or transaction conflict.
	//
	// Maps to:
	// - google.rpc.Code: ABORTED = 10;
	// - HTTP code: 409 Conflict
	ErrorCode_ABORTED ErrorCode = 10
	// Operation was performed on a resource that does not exist,
	// e.g. file or directory was not found.
	//
	// Maps to:
	// - google.rpc.Code: NOT_FOUND = 5;
	// - HTTP code: 404 Not Found
	ErrorCode_NOT_FOUND ErrorCode = 11
	// Operation was rejected due a conflict with an existing resource, e.g. attempted to create
	// file or directory that already exists.
	//
	// Prefer this over RESOURCE_CONFLICT.
	//
	// Maps to:
	// - google.rpc.Code: ALREADY_EXISTS = 6;
	// - HTTP code: 409 Conflict
	ErrorCode_ALREADY_EXISTS ErrorCode = 12
	// The request does not have valid authentication (AuthN) credentials for the operation.
	//
	// Prefer this over CUSTOMER_UNAUTHORIZED, unless you need to keep consistent behavior with legacy
	// code.
	// For authorization (AuthZ) errors use PERMISSION_DENIED.
	//
	// Maps to:
	// - google.rpc.Code: UNAUTHENTICATED = 16;
	// - HTTP code: 401 Unauthorized
	ErrorCode_UNAUTHENTICATED ErrorCode = 13
	// Supplied value for a parameter was invalid (e.g., giving a number for a string parameter).
	//
	// Maps to:
	// - google.rpc.Code: INVALID_ARGUMENT = 3;
	// - HTTP code: 400 Bad Request
	ErrorCode_INVALID_PARAMETER_VALUE ErrorCode = 1000
	// Indicates that the given API endpoint does not exist. Legacy, when possible - NOT_IMPLEMENTED
	// should be used instead to indicate that API doesn't exist.
	//
	// Maps to:
	// - google.rpc.Code: NOT_FOUND = 5;
	// - HTTP code: 404 Not Found
	ErrorCode_ENDPOINT_NOT_FOUND ErrorCode = 1001
	// Indicates that the given API request was malformed.
	ErrorCode_MALFORMED_REQUEST ErrorCode = 1002
	// If one or more of the inputs to a given RPC are not in a valid state for the action.
	ErrorCode_INVALID_STATE ErrorCode = 1003
	// The caller does not have permission to execute the specified operation.
	// PERMISSION_DENIED must not be used for rejections caused by exhausting some resource,
	// use RESOURCE_EXHAUSTED instead for those errors.
	// PERMISSION_DENIED must not be used if the caller can not be identified,
	// use CUSTOMER_UNAUTHORIZED instead for those errors.
	// This error code does not imply the request is valid or the requested entity exists or
	// satisfies other pre-conditions.
	//
	// Maps to:
	// - google.rpc.Code: PERMISSION_DENIED = 7;
	// - HTTP code: 403 Forbidden
	ErrorCode_PERMISSION_DENIED ErrorCode = 1004
	// If a given user/entity is trying to use a feature which has been disabled.
	//
	// Maps to:
	// - google.rpc.Code: NOT_FOUND = 5;
	// - HTTP code: 404 Not Found
	ErrorCode_FEATURE_DISABLED ErrorCode = 1005
	// The request does not have valid authentication (AuthN) credentials for the operation.
	//
	// For authentication (AuthN) errors prefer using UNAUTHENTICATED, unless you need to keep
	// consistent behavior with legacy code.
	// For authorization (AuthZ) errors use PERMISSION_DENIED.
	//
	// Important: name is confusing, this error code is for authentication (AuthN) errors, not
	// authorization (AuthZ) errors. It maps to 401 Unauthorized and suffers from the same confusing
	// naming. See https://datatracker.ietf.org/doc/html/rfc7235#section-3.1 - "[...] status code
	// indicates that the request has not been applied because it lacks valid authentication
	// credentials for the target resource. [...] If the request included authentication credentials,
	// then the 401 response indicates that authorization has been refused for those credentials."
	//
	// Also, see https://stackoverflow.com/a/6937030/16352922, it covers it pretty well.
	//
	// Maps to:
	// - google.rpc.Code: UNAUTHENTICATED = 16;
	// - HTTP code: 401 Unauthorized
	ErrorCode_CUSTOMER_UNAUTHORIZED ErrorCode = 1006
	// If the API request is rejected due to throttling.
	// Prefer a more generic RESOURCE_EXHAUSTED for the new use cases.
	//
	// Maps to:
	// - google.rpc.Code: RESOURCE_EXHAUSTED = 8;
	// - HTTP code: 429 Too Many Requests
	ErrorCode_REQUEST_LIMIT_EXCEEDED ErrorCode = 1007
	// Indicates API request was rejected due a conflict with an existing resource.
	ErrorCode_RESOURCE_CONFLICT ErrorCode = 1008
	// Indicates that the HTTP response cannot be correctly deserialized.
	// This currently is only used in DUST test clients, and not by any real service code.
	ErrorCode_UNPARSEABLE_HTTP_ERROR ErrorCode = 1009
	// The operation is not implemented or is not supported/enabled in this service.
	//
	// Maps to:
	// - google.rpc.Code: UNIMPLEMENTED = 12;
	// - HTTP code: 501 Not Implemented
	ErrorCode_NOT_IMPLEMENTED ErrorCode = 1010
	// Unrecoverable data loss or corruption.
	//
	// One of the major use cases is to indicate that server failed to validate the integrity of
	// the request. This error can occur when the checksum specified in the `X-Databricks-Checksum`
	// request header (or trailer) doesn't match the actual request content checksum.
	//
	// Note, in case of the severe corruption that results in a malformed request, the server may
	// send a generic `400 Bad Request` response rather than sending this error code.
	//
	// Maps to:
	// - google.rpc.Code: DATA_LOSS = 15;
	// - HTTP code: 500 Internal Server Error
	ErrorCode_DATA_LOSS ErrorCode = 1011
	// If the user attempts to perform an invalid state transition on a shard.
	ErrorCode_INVALID_STATE_TRANSITION ErrorCode = 2001
	// Unable to perform the operation because the shard was locked by some other operation.
	ErrorCode_COULD_NOT_ACQUIRE_LOCK ErrorCode = 2002
	// Operation was performed on a resource that already exists.
	//
	// Prefer using ALREADY_EXISTS. Unlike ALREADY_EXISTS - this maps to HTTP code
	// 500 Internal Server Error due to legacy reasons, remapping will be a backwards incompatible
	// change.
	ErrorCode_RESOURCE_ALREADY_EXISTS ErrorCode = 3001
	// Operation was performed on a resource that does not exist.
	//
	// Prefer using NOT_FOUND - see the note for the RESOURCE_ALREADY_EXISTS, because this pair of
	// codes is related and RESOURCE_ALREADY_EXISTS has bad mapping to the HTTP codes we added
	// new error codes NOT_FOUND and ALREADY_EXISTS, and recommend to use them instead.
	ErrorCode_RESOURCE_DOES_NOT_EXIST ErrorCode = 3002
	ErrorCode_QUOTA_EXCEEDED          ErrorCode = 4001
	ErrorCode_MAX_BLOCK_SIZE_EXCEEDED ErrorCode = 4002
	ErrorCode_MAX_READ_SIZE_EXCEEDED  ErrorCode = 4003
	ErrorCode_PARTIAL_DELETE          ErrorCode = 4004
	ErrorCode_MAX_LIST_SIZE_EXCEEDED  ErrorCode = 4005
	ErrorCode_DRY_RUN_FAILED          ErrorCode = 5001
	// Cluster request was rejected because it would exceed a resource limit.
	ErrorCode_RESOURCE_LIMIT_EXCEEDED               ErrorCode = 5002
	ErrorCode_DIRECTORY_NOT_EMPTY                   ErrorCode = 6001
	ErrorCode_DIRECTORY_PROTECTED                   ErrorCode = 6002
	ErrorCode_MAX_NOTEBOOK_SIZE_EXCEEDED            ErrorCode = 6003
	ErrorCode_MAX_CHILD_NODE_SIZE_EXCEEDED          ErrorCode = 6004
	ErrorCode_SEARCH_QUERY_TOO_LONG                 ErrorCode = 6100
	ErrorCode_SEARCH_QUERY_TOO_SHORT                ErrorCode = 6101
	ErrorCode_MANAGED_RESOURCE_GROUP_DOES_NOT_EXIST ErrorCode = 7001
	ErrorCode_PERMISSION_NOT_PROPAGATED             ErrorCode = 7002
	ErrorCode_DEPLOYMENT_TIMEOUT                    ErrorCode = 7003
	ErrorCode_GIT_CONFLICT                          ErrorCode = 8001
	ErrorCode_GIT_UNKNOWN_REF                       ErrorCode = 8002
	ErrorCode_GIT_SENSITIVE_TOKEN_DETECTED          ErrorCode = 8003
	ErrorCode_GIT_URL_NOT_ON_ALLOW_LIST             ErrorCode = 8004
	ErrorCode_GIT_REMOTE_ERROR                      ErrorCode = 8005
	ErrorCode_PROJECTS_OPERATION_TIMEOUT            ErrorCode = 8006
	ErrorCode_IPYNB_FILE_IN_REPO                    ErrorCode = 8007
	ErrorCode_INSECURE_PARTNER_RESPONSE             ErrorCode = 8100
	ErrorCode_MALFORMED_PARTNER_RESPONSE            ErrorCode = 8101
	ErrorCode_METASTORE_DOES_NOT_EXIST              ErrorCode = 9000
	ErrorCode_DAC_DOES_NOT_EXIST                    ErrorCode = 9001
	ErrorCode_CATALOG_DOES_NOT_EXIST                ErrorCode = 9002
	ErrorCode_SCHEMA_DOES_NOT_EXIST                 ErrorCode = 9003
	ErrorCode_TABLE_DOES_NOT_EXIST                  ErrorCode = 9004
	ErrorCode_SHARE_DOES_NOT_EXIST                  ErrorCode = 9005
	ErrorCode_RECIPIENT_DOES_NOT_EXIST              ErrorCode = 9006
	ErrorCode_STORAGE_CREDENTIAL_DOES_NOT_EXIST     ErrorCode = 9007
	ErrorCode_EXTERNAL_LOCATION_DOES_NOT_EXIST      ErrorCode = 9008
	ErrorCode_PRINCIPAL_DOES_NOT_EXIST              ErrorCode = 9009
	ErrorCode_PROVIDER_DOES_NOT_EXIST               ErrorCode = 9010
	ErrorCode_METASTORE_ALREADY_EXISTS              ErrorCode = 9020
	ErrorCode_DAC_ALREADY_EXISTS                    ErrorCode = 9021
	ErrorCode_CATALOG_ALREADY_EXISTS                ErrorCode = 9022
	ErrorCode_SCHEMA_ALREADY_EXISTS                 ErrorCode = 9023
	ErrorCode_TABLE_ALREADY_EXISTS                  ErrorCode = 9024
	ErrorCode_SHARE_ALREADY_EXISTS                  ErrorCode = 9025
	ErrorCode_RECIPIENT_ALREADY_EXISTS              ErrorCode = 9026
	ErrorCode_STORAGE_CREDENTIAL_ALREADY_EXISTS     ErrorCode = 9027
	ErrorCode_EXTERNAL_LOCATION_ALREADY_EXISTS      ErrorCode = 9028
	ErrorCode_PROVIDER_ALREADY_EXISTS               ErrorCode = 9029
	ErrorCode_CATALOG_NOT_EMPTY                     ErrorCode = 9040
	ErrorCode_SCHEMA_NOT_EMPTY                      ErrorCode = 9041
	ErrorCode_METASTORE_NOT_EMPTY                   ErrorCode = 9042
	ErrorCode_PROVIDER_SHARE_NOT_ACCESSIBLE         ErrorCode = 9060
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		1:    "INTERNAL_ERROR",
		2:    "TEMPORARILY_UNAVAILABLE",
		3:    "IO_ERROR",
		4:    "BAD_REQUEST",
		5:    "SERVICE_UNDER_MAINTENANCE",
		6:    "WORKSPACE_TEMPORARILY_UNAVAILABLE",
		7:    "DEADLINE_EXCEEDED",
		8:    "CANCELLED",
		9:    "RESOURCE_EXHAUSTED",
		10:   "ABORTED",
		11:   "NOT_FOUND",
		12:   "ALREADY_EXISTS",
		13:   "UNAUTHENTICATED",
		1000: "INVALID_PARAMETER_VALUE",
		1001: "ENDPOINT_NOT_FOUND",
		1002: "MALFORMED_REQUEST",
		1003: "INVALID_STATE",
		1004: "PERMISSION_DENIED",
		1005: "FEATURE_DISABLED",
		1006: "CUSTOMER_UNAUTHORIZED",
		1007: "REQUEST_LIMIT_EXCEEDED",
		1008: "RESOURCE_CONFLICT",
		1009: "UNPARSEABLE_HTTP_ERROR",
		1010: "NOT_IMPLEMENTED",
		1011: "DATA_LOSS",
		2001: "INVALID_STATE_TRANSITION",
		2002: "COULD_NOT_ACQUIRE_LOCK",
		3001: "RESOURCE_ALREADY_EXISTS",
		3002: "RESOURCE_DOES_NOT_EXIST",
		4001: "QUOTA_EXCEEDED",
		4002: "MAX_BLOCK_SIZE_EXCEEDED",
		4003: "MAX_READ_SIZE_EXCEEDED",
		4004: "PARTIAL_DELETE",
		4005: "MAX_LIST_SIZE_EXCEEDED",
		5001: "DRY_RUN_FAILED",
		5002: "RESOURCE_LIMIT_EXCEEDED",
		6001: "DIRECTORY_NOT_EMPTY",
		6002: "DIRECTORY_PROTECTED",
		6003: "MAX_NOTEBOOK_SIZE_EXCEEDED",
		6004: "MAX_CHILD_NODE_SIZE_EXCEEDED",
		6100: "SEARCH_QUERY_TOO_LONG",
		6101: "SEARCH_QUERY_TOO_SHORT",
		7001: "MANAGED_RESOURCE_GROUP_DOES_NOT_EXIST",
		7002: "PERMISSION_NOT_PROPAGATED",
		7003: "DEPLOYMENT_TIMEOUT",
		8001: "GIT_CONFLICT",
		8002: "GIT_UNKNOWN_REF",
		8003: "GIT_SENSITIVE_TOKEN_DETECTED",
		8004: "GIT_URL_NOT_ON_ALLOW_LIST",
		8005: "GIT_REMOTE_ERROR",
		8006: "PROJECTS_OPERATION_TIMEOUT",
		8007: "IPYNB_FILE_IN_REPO",
		8100: "INSECURE_PARTNER_RESPONSE",
		8101: "MALFORMED_PARTNER_RESPONSE",
		9000: "METASTORE_DOES_NOT_EXIST",
		9001: "DAC_DOES_NOT_EXIST",
		9002: "CATALOG_DOES_NOT_EXIST",
		9003: "SCHEMA_DOES_NOT_EXIST",
		9004: "TABLE_DOES_NOT_EXIST",
		9005: "SHARE_DOES_NOT_EXIST",
		9006: "RECIPIENT_DOES_NOT_EXIST",
		9007: "STORAGE_CREDENTIAL_DOES_NOT_EXIST",
		9008: "EXTERNAL_LOCATION_DOES_NOT_EXIST",
		9009: "PRINCIPAL_DOES_NOT_EXIST",
		9010: "PROVIDER_DOES_NOT_EXIST",
		9020: "METASTORE_ALREADY_EXISTS",
		9021: "DAC_ALREADY_EXISTS",
		9022: "CATALOG_ALREADY_EXISTS",
		9023: "SCHEMA_ALREADY_EXISTS",
		9024: "TABLE_ALREADY_EXISTS",
		9025: "SHARE_ALREADY_EXISTS",
		9026: "RECIPIENT_ALREADY_EXISTS",
		9027: "STORAGE_CREDENTIAL_ALREADY_EXISTS",
		9028: "EXTERNAL_LOCATION_ALREADY_EXISTS",
		9029: "PROVIDER_ALREADY_EXISTS",
		9040: "CATALOG_NOT_EMPTY",
		9041: "SCHEMA_NOT_EMPTY",
		9042: "METASTORE_NOT_EMPTY",
		9060: "PROVIDER_SHARE_NOT_ACCESSIBLE",
	}
	ErrorCode_value = map[string]int32{
		"INTERNAL_ERROR":                        1,
		"TEMPORARILY_UNAVAILABLE":               2,
		"IO_ERROR":                              3,
		"BAD_REQUEST":                           4,
		"SERVICE_UNDER_MAINTENANCE":             5,
		"WORKSPACE_TEMPORARILY_UNAVAILABLE":     6,
		"DEADLINE_EXCEEDED":                     7,
		"CANCELLED":                             8,
		"RESOURCE_EXHAUSTED":                    9,
		"ABORTED":                               10,
		"NOT_FOUND":                             11,
		"ALREADY_EXISTS":                        12,
		"UNAUTHENTICATED":                       13,
		"INVALID_PARAMETER_VALUE":               1000,
		"ENDPOINT_NOT_FOUND":                    1001,
		"MALFORMED_REQUEST":                     1002,
		"INVALID_STATE":                         1003,
		"PERMISSION_DENIED":                     1004,
		"FEATURE_DISABLED":                      1005,
		"CUSTOMER_UNAUTHORIZED":                 1006,
		"REQUEST_LIMIT_EXCEEDED":                1007,
		"RESOURCE_CONFLICT":                     1008,
		"UNPARSEABLE_HTTP_ERROR":                1009,
		"NOT_IMPLEMENTED":                       1010,
		"DATA_LOSS":                             1011,
		"INVALID_STATE_TRANSITION":              2001,
		"COULD_NOT_ACQUIRE_LOCK":                2002,
		"RESOURCE_ALREADY_EXISTS":               3001,
		"RESOURCE_DOES_NOT_EXIST":               3002,
		"QUOTA_EXCEEDED":                        4001,
		"MAX_BLOCK_SIZE_EXCEEDED":               4002,
		"MAX_READ_SIZE_EXCEEDED":                4003,
		"PARTIAL_DELETE":                        4004,
		"MAX_LIST_SIZE_EXCEEDED":                4005,
		"DRY_RUN_FAILED":                        5001,
		"RESOURCE_LIMIT_EXCEEDED":               5002,
		"DIRECTORY_NOT_EMPTY":                   6001,
		"DIRECTORY_PROTECTED":                   6002,
		"MAX_NOTEBOOK_SIZE_EXCEEDED":            6003,
		"MAX_CHILD_NODE_SIZE_EXCEEDED":          6004,
		"SEARCH_QUERY_TOO_LONG":                 6100,
		"SEARCH_QUERY_TOO_SHORT":                6101,
		"MANAGED_RESOURCE_GROUP_DOES_NOT_EXIST": 7001,
		"PERMISSION_NOT_PROPAGATED":             7002,
		"DEPLOYMENT_TIMEOUT":                    7003,
		"GIT_CONFLICT":                          8001,
		"GIT_UNKNOWN_REF":                       8002,
		"GIT_SENSITIVE_TOKEN_DETECTED":          8003,
		"GIT_URL_NOT_ON_ALLOW_LIST":             8004,
		"GIT_REMOTE_ERROR":                      8005,
		"PROJECTS_OPERATION_TIMEOUT":            8006,
		"IPYNB_FILE_IN_REPO":                    8007,
		"INSECURE_PARTNER_RESPONSE":             8100,
		"MALFORMED_PARTNER_RESPONSE":            8101,
		"METASTORE_DOES_NOT_EXIST":              9000,
		"DAC_DOES_NOT_EXIST":                    9001,
		"CATALOG_DOES_NOT_EXIST":                9002,
		"SCHEMA_DOES_NOT_EXIST":                 9003,
		"TABLE_DOES_NOT_EXIST":                  9004,
		"SHARE_DOES_NOT_EXIST":                  9005,
		"RECIPIENT_DOES_NOT_EXIST":              9006,
		"STORAGE_CREDENTIAL_DOES_NOT_EXIST":     9007,
		"EXTERNAL_LOCATION_DOES_NOT_EXIST":      9008,
		"PRINCIPAL_DOES_NOT_EXIST":              9009,
		"PROVIDER_DOES_NOT_EXIST":               9010,
		"METASTORE_ALREADY_EXISTS":              9020,
		"DAC_ALREADY_EXISTS":                    9021,
		"CATALOG_ALREADY_EXISTS":                9022,
		"SCHEMA_ALREADY_EXISTS":                 9023,
		"TABLE_ALREADY_EXISTS":                  9024,
		"SHARE_ALREADY_EXISTS":                  9025,
		"RECIPIENT_ALREADY_EXISTS":              9026,
		"STORAGE_CREDENTIAL_ALREADY_EXISTS":     9027,
		"EXTERNAL_LOCATION_ALREADY_EXISTS":      9028,
		"PROVIDER_ALREADY_EXISTS":               9029,
		"CATALOG_NOT_EMPTY":                     9040,
		"SCHEMA_NOT_EMPTY":                      9041,
		"METASTORE_NOT_EMPTY":                   9042,
		"PROVIDER_SHARE_NOT_ACCESSIBLE":         9060,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_databricks_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_databricks_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrorCode(num)
	return nil
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{1}
}

// Defines the set of options declared for every service RPC which are used to
// direct RPCs to endpoints, as well as other metadata about the RPC.
type DatabricksRpcOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []*HttpEndpoint `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty" query:"endpoints" params:"endpoints"`
	// Indicates which users are allowed to initiate this RPC.
	Visibility *Visibility `protobuf:"varint,2,opt,name=visibility,enum=mlflow.Visibility" json:"visibility,omitempty" query:"visibility" params:"visibility"`
	// Complete definition of all error codes (from a statically defined set) which this method
	// may return.
	ErrorCodes []ErrorCode `protobuf:"varint,3,rep,name=error_codes,json=errorCodes,enum=mlflow.ErrorCode" json:"error_codes,omitempty" query:"error_codes" params:"error_codes"`
	// If defined, a rate limit will be applied to this RPC for all requests from the API proxy.
	RateLimit *RateLimit `protobuf:"bytes,4,opt,name=rate_limit,json=rateLimit" json:"rate_limit,omitempty" query:"rate_limit" params:"rate_limit"`
	// If defined, overrides the default title used for in the API docs. See ProtobufDocGenerator
	// for more info.
	RpcDocTitle *string `protobuf:"bytes,5,opt,name=rpc_doc_title,json=rpcDocTitle" json:"rpc_doc_title,omitempty" query:"rpc_doc_title" params:"rpc_doc_title"`
}

func (x *DatabricksRpcOptions) Reset() {
	*x = DatabricksRpcOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabricksRpcOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksRpcOptions) ProtoMessage() {}

func (x *DatabricksRpcOptions) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksRpcOptions.ProtoReflect.Descriptor instead.
func (*DatabricksRpcOptions) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{0}
}

func (x *DatabricksRpcOptions) GetEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *DatabricksRpcOptions) GetVisibility() Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Visibility_PUBLIC
}

func (x *DatabricksRpcOptions) GetErrorCodes() []ErrorCode {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *DatabricksRpcOptions) GetRateLimit() *RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *DatabricksRpcOptions) GetRpcDocTitle() string {
	if x != nil && x.RpcDocTitle != nil {
		return *x.RpcDocTitle
	}
	return ""
}

// Defines the set of options needed for autogenerating graphql modules.
// Will add more fields (batch loader, renaming) later.
// Empty for now. The rpc will be visible for graphql module autogeneration if this field is set.
type DatabricksGraphqlOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatabricksGraphqlOptions) Reset() {
	*x = DatabricksGraphqlOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabricksGraphqlOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksGraphqlOptions) ProtoMessage() {}

func (x *DatabricksGraphqlOptions) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksGraphqlOptions.ProtoReflect.Descriptor instead.
func (*DatabricksGraphqlOptions) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{1}
}

type HttpEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP method like POST or GET.
	Method *string `protobuf:"bytes,1,opt,name=method,def=POST" json:"method,omitempty" query:"method" params:"method"`
	// Conceptual path of the API, like "/clusters" or "/clusters/create". Should start with a slash.
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	// A version like 1.1 which is prepended to the URL (e.g., GET /1.1/clusters).
	// Breaking changes to an RPC must use a different version number.
	Since *ApiVersion `protobuf:"bytes,3,opt,name=since" json:"since,omitempty" query:"since" params:"since"`
}

// Default values for HttpEndpoint fields.
const (
	Default_HttpEndpoint_Method = string("POST")
)

func (x *HttpEndpoint) Reset() {
	*x = HttpEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpEndpoint) ProtoMessage() {}

func (x *HttpEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpEndpoint.ProtoReflect.Descriptor instead.
func (*HttpEndpoint) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{2}
}

func (x *HttpEndpoint) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return Default_HttpEndpoint_Method
}

func (x *HttpEndpoint) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *HttpEndpoint) GetSince() *ApiVersion {
	if x != nil {
		return x.Since
	}
	return nil
}

type ApiVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major *int32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty" query:"major" params:"major"`
	Minor *int32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty" query:"minor" params:"minor"`
}

func (x *ApiVersion) Reset() {
	*x = ApiVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiVersion) ProtoMessage() {}

func (x *ApiVersion) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiVersion.ProtoReflect.Descriptor instead.
func (*ApiVersion) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{3}
}

func (x *ApiVersion) GetMajor() int32 {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return 0
}

func (x *ApiVersion) GetMinor() int32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return 0
}

// API rate limits applied to RPCs coming from the API Proxy. The rate limits are applied on a
// per organization basis.
type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum burst of API requests allowed for a single endpoint. In the context of the
	// token bucket algorithm, this constant represents the total capacity of the token bucket.
	MaxBurst *int64 `protobuf:"varint,1,opt,name=max_burst,json=maxBurst" json:"max_burst,omitempty" query:"max_burst" params:"max_burst"`
	// The maximum sustained request per second limit for a single endpoint. In the context of the,
	// token bucket algorithm, this constant represents the rate at which the token bucket fills.
	MaxSustainedPerSecond *int64 `protobuf:"varint,2,opt,name=max_sustained_per_second,json=maxSustainedPerSecond" json:"max_sustained_per_second,omitempty" query:"max_sustained_per_second" params:"max_sustained_per_second"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{4}
}

func (x *RateLimit) GetMaxBurst() int64 {
	if x != nil && x.MaxBurst != nil {
		return *x.MaxBurst
	}
	return 0
}

func (x *RateLimit) GetMaxSustainedPerSecond() int64 {
	if x != nil && x.MaxSustainedPerSecond != nil {
		return *x.MaxSustainedPerSecond
	}
	return 0
}

// A block of documentation that is added to the AST after parsing the original protocol buffer.
type DocumentationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string of documentation attached to this particular item.
	Docstring *string `protobuf:"bytes,1,opt,name=docstring" json:"docstring,omitempty" query:"docstring" params:"docstring"`
	// The string of documentation that is *before* this item. This only makes sense for top-level
	// items such as (top-level) messages, (top-level) enumerations, or services. In all other
	// cases, this string is empty.
	LeadDoc *string `protobuf:"bytes,2,opt,name=lead_doc,json=leadDoc" json:"lead_doc,omitempty" query:"lead_doc" params:"lead_doc"`
	// The visibility level when the docstring was generated.
	// The documentation extractor builds multiple versions of the documentation, one for each
	// visibility level. The documentation is then generated for each visibility level.
	Visibility *Visibility `protobuf:"varint,3,opt,name=visibility,enum=mlflow.Visibility" json:"visibility,omitempty" query:"visibility" params:"visibility"`
	// The original proto path in the internal representation. This is useful when performing field
	// flattening to figure out what the original field was.
	// One example is ["jobs","Run","original_attempt_run_id"] for jobs.
	// This path is unique.
	OriginalProtoPath []string `protobuf:"bytes,4,rep,name=original_proto_path,json=originalProtoPath" json:"original_proto_path,omitempty" query:"original_proto_path" params:"original_proto_path"`
	// The location (line number) of the start of the documentation. This is required to keep the
	// pieces of documentation sorted.
	Position *int32 `protobuf:"varint,5,opt,name=position" json:"position,omitempty" query:"position" params:"position"`
}

func (x *DocumentationMetadata) Reset() {
	*x = DocumentationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationMetadata) ProtoMessage() {}

func (x *DocumentationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationMetadata.ProtoReflect.Descriptor instead.
func (*DocumentationMetadata) Descriptor() ([]byte, []int) {
	return file_databricks_proto_rawDescGZIP(), []int{5}
}

func (x *DocumentationMetadata) GetDocstring() string {
	if x != nil && x.Docstring != nil {
		return *x.Docstring
	}
	return ""
}

func (x *DocumentationMetadata) GetLeadDoc() string {
	if x != nil && x.LeadDoc != nil {
		return *x.LeadDoc
	}
	return ""
}

func (x *DocumentationMetadata) GetVisibility() Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Visibility_PUBLIC
}

func (x *DocumentationMetadata) GetOriginalProtoPath() []string {
	if x != nil {
		return x.OriginalProtoPath
	}
	return nil
}

func (x *DocumentationMetadata) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

var file_databricks_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Visibility)(nil),
		Field:         51310,
		Name:          "mlflow.visibility",
		Tag:           "varint,51310,opt,name=visibility,enum=mlflow.Visibility",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         51311,
		Name:          "mlflow.validate_required",
		Tag:           "varint,51311,opt,name=validate_required",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         51312,
		Name:          "mlflow.json_inline",
		Tag:           "varint,51312,opt,name=json_inline",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         51313,
		Name:          "mlflow.json_map",
		Tag:           "varint,51313,opt,name=json_map",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.field_doc",
		Tag:           "bytes,51314,rep,name=field_doc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*DatabricksRpcOptions)(nil),
		Field:         51310,
		Name:          "mlflow.rpc",
		Tag:           "bytes,51310,opt,name=rpc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.method_doc",
		Tag:           "bytes,51314,rep,name=method_doc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*DatabricksGraphqlOptions)(nil),
		Field:         51399,
		Name:          "mlflow.graphql",
		Tag:           "bytes,51399,opt,name=graphql",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.message_doc",
		Tag:           "bytes,51314,rep,name=message_doc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.service_doc",
		Tag:           "bytes,51314,rep,name=service_doc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.enum_doc",
		Tag:           "bytes,51314,rep,name=enum_doc",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*Visibility)(nil),
		Field:         51310,
		Name:          "mlflow.enum_value_visibility",
		Tag:           "varint,51310,opt,name=enum_value_visibility,enum=mlflow.Visibility",
		Filename:      "databricks.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: ([]*DocumentationMetadata)(nil),
		Field:         51314,
		Name:          "mlflow.enum_value_doc",
		Tag:           "bytes,51314,rep,name=enum_value_doc",
		Filename:      "databricks.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Indicates an overriding visibility for this field. This can only reduce the visibility;
	// a public field in an internal API will not have an effect.
	//
	// optional mlflow.Visibility visibility = 51310;
	E_Visibility = &file_databricks_proto_extTypes[0]
	// This annotation indicates that certain fields must be supplied for the request to be carried
	// out successfully.
	// A request field may go from being required to optional over time, but a field may not
	// go from being optional to required, for backwards compatiblity reasons.
	// Request RPCs are validated automatically prior to processing for required fields, but
	// returned values are not validated in any way.
	//
	// optional bool validate_required = 51311;
	E_ValidateRequired = &file_databricks_proto_extTypes[1]
	// Causes the fields within the tagged Message to be inlined into this Message, for the purposes
	// of our JSON API.
	// For example, rather than serializing
	//
	//	{
	//	  "attrs" : {
	//	    "cluster_name" : "Foo"
	//	  }
	//	}
	//
	// If "attrs" were marked json_inline, we would upgrade cluster_name to a top-level field:
	//
	//	{
	//	  "cluster_name" : "Foo"
	//	}
	//
	// Note that this is only applicable to singular Message fields.
	//
	// optional bool json_inline = 51312;
	E_JsonInline = &file_databricks_proto_extTypes[2]
	// Causes a field which conceptually represents a Map to be serialized as a JSON Map.
	// The given field must be a Message with exactly 2 fields called "key" and "value", where key
	// must be a string.
	// For example, rather than serializing
	//
	//	[ { "key" : "spark.speculation", "value" : "false" } ]
	//
	// If this field were marked json_map, we would serialize it as
	//
	//	{ "spark.speculation" : "false" }
	//
	// optional bool json_map = 51313;
	E_JsonMap = &file_databricks_proto_extTypes[3]
	// The documentation meta data for this field. This gets added automatically when the proto is
	// parsed.
	// There are as many doc blocks as visibility levels.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata field_doc = 51314;
	E_FieldDoc = &file_databricks_proto_extTypes[4]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional mlflow.DatabricksRpcOptions rpc = 51310;
	E_Rpc = &file_databricks_proto_extTypes[5]
	// The documentation metadata.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata method_doc = 51314;
	E_MethodDoc = &file_databricks_proto_extTypes[6] // Same id everywhere
	// If this is set, this rpc will be visible for graphql module autogeneration.
	//
	// optional mlflow.DatabricksGraphqlOptions graphql = 51399;
	E_Graphql = &file_databricks_proto_extTypes[7]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// The documentation metadata.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata message_doc = 51314;
	E_MessageDoc = &file_databricks_proto_extTypes[8] // Same id everywhere
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// The documentation metadata.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata service_doc = 51314;
	E_ServiceDoc = &file_databricks_proto_extTypes[9] // Same id everywhere
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// The documentation metadata.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata enum_doc = 51314;
	E_EnumDoc = &file_databricks_proto_extTypes[10] // Same id everywhere
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// Indicates an overriding visibility for this field. This can only reduce the visibility;
	// a public field in an internal API will not have an effect.
	//
	// optional mlflow.Visibility enum_value_visibility = 51310;
	E_EnumValueVisibility = &file_databricks_proto_extTypes[11]
	// The documentation metadata.
	// This is not meant to be crafted by hand; this will be automatically generated when parsing
	// the proto file.
	//
	// repeated mlflow.DocumentationMetadata enum_value_doc = 51314;
	E_EnumValueDoc = &file_databricks_proto_extTypes[12] // Same id everywhere
)

var File_databricks_proto protoreflect.FileDescriptor

var file_databricks_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x70,
	0x63, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x70, 0x63, 0x44, 0x6f, 0x63, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x1a,
	0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x48, 0x74,
	0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x22, 0x61, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x3f, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xfd, 0x10, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58,
	0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1c,
	0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a, 0x12,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xe9, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xea, 0x07, 0x12, 0x12, 0x0a,
	0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xeb,
	0x07, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xec, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xed, 0x07,
	0x12, 0x1a, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xee, 0x07, 0x12, 0x1b, 0x0a, 0x16,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xef, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0xf0,
	0x07, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x4e, 0x50, 0x41, 0x52, 0x53, 0x45, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf1, 0x07, 0x12, 0x14,
	0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45,
	0x44, 0x10, 0xf2, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53,
	0x53, 0x10, 0xf3, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xd1, 0x0f, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xd2, 0x0f,
	0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xb9, 0x17, 0x12, 0x1c,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xba, 0x17, 0x12, 0x13, 0x0a, 0x0e,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa1,
	0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa2, 0x1f, 0x12,
	0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa3, 0x1f, 0x12, 0x13, 0x0a, 0x0e,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xa4,
	0x1f, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa5, 0x1f, 0x12, 0x13,
	0x0a, 0x0e, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x89, 0x27, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x8a,
	0x27, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xf1, 0x2e, 0x12, 0x18, 0x0a, 0x13, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0xf2, 0x2e, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0xf3, 0x2e, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48,
	0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xf4, 0x2e, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0xd4, 0x2f, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10,
	0xd5, 0x2f, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd9, 0x36, 0x12, 0x1e,
	0x0a, 0x19, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0xda, 0x36, 0x12, 0x17,
	0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0xdb, 0x36, 0x12, 0x11, 0x0a, 0x0c, 0x47, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0xc1, 0x3e, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x10, 0xc2, 0x3e,
	0x12, 0x21, 0x0a, 0x1c, 0x47, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0xc3, 0x3e, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x49, 0x54, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0xc4, 0x3e, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc5, 0x3e, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xc6, 0x3e, 0x12, 0x17, 0x0a, 0x12, 0x49,
	0x50, 0x59, 0x4e, 0x42, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x10, 0xc7, 0x3e, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xa4, 0x3f, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0xa5, 0x3f, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x45, 0x54, 0x41, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0xa8, 0x46, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x41, 0x43, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xa9, 0x46, 0x12, 0x1b, 0x0a,
	0x16, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xaa, 0x46, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x41, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xab, 0x46, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xac,
	0x46, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xad, 0x46, 0x12, 0x1d, 0x0a, 0x18,
	0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xae, 0x46, 0x12, 0x26, 0x0a, 0x21, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0xaf, 0x46, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb0, 0x46, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52,
	0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb1, 0x46, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0xb2, 0x46, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x45, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0xbc, 0x46, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x41, 0x43, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xbd, 0x46, 0x12,
	0x1b, 0x0a, 0x16, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xbe, 0x46, 0x12, 0x1a, 0x0a, 0x15,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xbf, 0x46, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0xc0, 0x46, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xc1, 0x46, 0x12, 0x1d,
	0x0a, 0x18, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xc2, 0x46, 0x12, 0x26, 0x0a,
	0x21, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0xc3, 0x46, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xc4, 0x46, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xc5, 0x46, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x41,
	0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0xd0, 0x46, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xd1, 0x46, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x45, 0x54,
	0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0xd2, 0x46, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x10, 0xe4, 0x46, 0x3a, 0x53, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xee, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x4c, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xef, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x40, 0x0a, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x0a, 0x08,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf1, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x3a, 0x5b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x6f, 0x63, 0x3a, 0x50, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xee, 0x90, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x03, 0x72, 0x70, 0x63, 0x3a, 0x5e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x44, 0x6f, 0x63, 0x3a, 0x5c, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xc7, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x61, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x3a, 0x61, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x3a, 0x58, 0x0a, 0x08, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x63, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e,
	0x75, 0x6d, 0x44, 0x6f, 0x63, 0x3a, 0x6b, 0x0a, 0x15, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xee, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x13, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x3a, 0x68, 0x0a, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x64, 0x6f, 0x63, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0x90, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x63, 0x42, 0x2a, 0xe2, 0x3f,
	0x02, 0x10, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
}

var (
	file_databricks_proto_rawDescOnce sync.Once
	file_databricks_proto_rawDescData = file_databricks_proto_rawDesc
)

func file_databricks_proto_rawDescGZIP() []byte {
	file_databricks_proto_rawDescOnce.Do(func() {
		file_databricks_proto_rawDescData = protoimpl.X.CompressGZIP(file_databricks_proto_rawDescData)
	})
	return file_databricks_proto_rawDescData
}

var file_databricks_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_databricks_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_databricks_proto_goTypes = []interface{}{
	(Visibility)(0),                       // 0: mlflow.Visibility
	(ErrorCode)(0),                        // 1: mlflow.ErrorCode
	(*DatabricksRpcOptions)(nil),          // 2: mlflow.DatabricksRpcOptions
	(*DatabricksGraphqlOptions)(nil),      // 3: mlflow.DatabricksGraphqlOptions
	(*HttpEndpoint)(nil),                  // 4: mlflow.HttpEndpoint
	(*ApiVersion)(nil),                    // 5: mlflow.ApiVersion
	(*RateLimit)(nil),                     // 6: mlflow.RateLimit
	(*DocumentationMetadata)(nil),         // 7: mlflow.DocumentationMetadata
	(*descriptorpb.FieldOptions)(nil),     // 8: google.protobuf.FieldOptions
	(*descriptorpb.MethodOptions)(nil),    // 9: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),   // 10: google.protobuf.MessageOptions
	(*descriptorpb.ServiceOptions)(nil),   // 11: google.protobuf.ServiceOptions
	(*descriptorpb.EnumOptions)(nil),      // 12: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil), // 13: google.protobuf.EnumValueOptions
}
var file_databricks_proto_depIdxs = []int32{
	4,  // 0: mlflow.DatabricksRpcOptions.endpoints:type_name -> mlflow.HttpEndpoint
	0,  // 1: mlflow.DatabricksRpcOptions.visibility:type_name -> mlflow.Visibility
	1,  // 2: mlflow.DatabricksRpcOptions.error_codes:type_name -> mlflow.ErrorCode
	6,  // 3: mlflow.DatabricksRpcOptions.rate_limit:type_name -> mlflow.RateLimit
	5,  // 4: mlflow.HttpEndpoint.since:type_name -> mlflow.ApiVersion
	0,  // 5: mlflow.DocumentationMetadata.visibility:type_name -> mlflow.Visibility
	8,  // 6: mlflow.visibility:extendee -> google.protobuf.FieldOptions
	8,  // 7: mlflow.validate_required:extendee -> google.protobuf.FieldOptions
	8,  // 8: mlflow.json_inline:extendee -> google.protobuf.FieldOptions
	8,  // 9: mlflow.json_map:extendee -> google.protobuf.FieldOptions
	8,  // 10: mlflow.field_doc:extendee -> google.protobuf.FieldOptions
	9,  // 11: mlflow.rpc:extendee -> google.protobuf.MethodOptions
	9,  // 12: mlflow.method_doc:extendee -> google.protobuf.MethodOptions
	9,  // 13: mlflow.graphql:extendee -> google.protobuf.MethodOptions
	10, // 14: mlflow.message_doc:extendee -> google.protobuf.MessageOptions
	11, // 15: mlflow.service_doc:extendee -> google.protobuf.ServiceOptions
	12, // 16: mlflow.enum_doc:extendee -> google.protobuf.EnumOptions
	13, // 17: mlflow.enum_value_visibility:extendee -> google.protobuf.EnumValueOptions
	13, // 18: mlflow.enum_value_doc:extendee -> google.protobuf.EnumValueOptions
	0,  // 19: mlflow.visibility:type_name -> mlflow.Visibility
	7,  // 20: mlflow.field_doc:type_name -> mlflow.DocumentationMetadata
	2,  // 21: mlflow.rpc:type_name -> mlflow.DatabricksRpcOptions
	7,  // 22: mlflow.method_doc:type_name -> mlflow.DocumentationMetadata
	3,  // 23: mlflow.graphql:type_name -> mlflow.DatabricksGraphqlOptions
	7,  // 24: mlflow.message_doc:type_name -> mlflow.DocumentationMetadata
	7,  // 25: mlflow.service_doc:type_name -> mlflow.DocumentationMetadata
	7,  // 26: mlflow.enum_doc:type_name -> mlflow.DocumentationMetadata
	0,  // 27: mlflow.enum_value_visibility:type_name -> mlflow.Visibility
	7,  // 28: mlflow.enum_value_doc:type_name -> mlflow.DocumentationMetadata
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	19, // [19:29] is the sub-list for extension type_name
	6,  // [6:19] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_databricks_proto_init() }
func file_databricks_proto_init() {
	if File_databricks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_databricks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabricksRpcOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabricksGraphqlOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_databricks_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 13,
			NumServices:   0,
		},
		GoTypes:           file_databricks_proto_goTypes,
		DependencyIndexes: file_databricks_proto_depIdxs,
		EnumInfos:         file_databricks_proto_enumTypes,
		MessageInfos:      file_databricks_proto_msgTypes,
		ExtensionInfos:    file_databricks_proto_extTypes,
	}.Build()
	File_databricks_proto = out.File
	file_databricks_proto_rawDesc = nil
	file_databricks_proto_goTypes = nil
	file_databricks_proto_depIdxs = nil
}
