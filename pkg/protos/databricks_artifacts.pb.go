// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: databricks_artifacts.proto

package protos

import (
	_ "github.com/mlflow/mlflow-go/pkg/protos/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of a given artifact access credential
type ArtifactCredentialType int32

const (
	// The credential is an Azure Shared Access Signature URI. For more information, see
	// https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview
	ArtifactCredentialType_AZURE_SAS_URI ArtifactCredentialType = 1
	// The credential is an AWS Presigned URL. For more information, see
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html
	ArtifactCredentialType_AWS_PRESIGNED_URL ArtifactCredentialType = 2
	// The credential is a GCP Signed URL. For more information, see
	// https://cloud.google.com/storage/docs/access-control/signed-urls
	ArtifactCredentialType_GCP_SIGNED_URL ArtifactCredentialType = 3
	// The credential is an Azure Shared Access Signature URI for ADLS.  For more
	// information see
	// https://docs.microsoft.com/en-us/rest/api/storageservices/data-lake-storage-gen2
	// and
	// https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview
	ArtifactCredentialType_AZURE_ADLS_GEN2_SAS_URI ArtifactCredentialType = 4
)

// Enum value maps for ArtifactCredentialType.
var (
	ArtifactCredentialType_name = map[int32]string{
		1: "AZURE_SAS_URI",
		2: "AWS_PRESIGNED_URL",
		3: "GCP_SIGNED_URL",
		4: "AZURE_ADLS_GEN2_SAS_URI",
	}
	ArtifactCredentialType_value = map[string]int32{
		"AZURE_SAS_URI":           1,
		"AWS_PRESIGNED_URL":       2,
		"GCP_SIGNED_URL":          3,
		"AZURE_ADLS_GEN2_SAS_URI": 4,
	}
)

func (x ArtifactCredentialType) Enum() *ArtifactCredentialType {
	p := new(ArtifactCredentialType)
	*p = x
	return p
}

func (x ArtifactCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_databricks_artifacts_proto_enumTypes[0].Descriptor()
}

func (ArtifactCredentialType) Type() protoreflect.EnumType {
	return &file_databricks_artifacts_proto_enumTypes[0]
}

func (x ArtifactCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactCredentialType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactCredentialType(num)
	return nil
}

// Deprecated: Use ArtifactCredentialType.Descriptor instead.
func (ArtifactCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0}
}

type ArtifactCredentialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run containing the artifact that can be accessed
	// with the credential
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// The path, relative to the Run's artifact root location, of the artifact
	// that can be accessed with the credential
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path"`
	// The signed URI credential that provides access to the artifact
	SignedUri *string `protobuf:"bytes,3,opt,name=signed_uri,json=signedUri" json:"signed_uri,omitempty" query:"signed_uri"`
	// A collection of HTTP headers that should be specified when uploading to
	// or downloading from the specified `signed_uri`
	Headers []*ArtifactCredentialInfo_HttpHeader `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty" query:"headers"`
	// The type of the signed credential URI (e.g., an AWS presigned URL
	// or an Azure Shared Access Signature URI)
	Type *ArtifactCredentialType `protobuf:"varint,5,opt,name=type,enum=mlflow.ArtifactCredentialType" json:"type,omitempty" query:"type"`
}

func (x *ArtifactCredentialInfo) Reset() {
	*x = ArtifactCredentialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCredentialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCredentialInfo) ProtoMessage() {}

func (x *ArtifactCredentialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCredentialInfo.ProtoReflect.Descriptor instead.
func (*ArtifactCredentialInfo) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactCredentialInfo) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetSignedUri() string {
	if x != nil && x.SignedUri != nil {
		return *x.SignedUri
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetHeaders() []*ArtifactCredentialInfo_HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ArtifactCredentialInfo) GetType() ArtifactCredentialType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ArtifactCredentialType_AZURE_SAS_URI
}

type GetCredentialsForRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run for which to fetch artifact read credentials
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// The artifact paths, relative to the Run's artifact root location, for which to
	// fetch artifact read credentials. Must not be empty.
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty" query:"path"`
	// Token specifying the page of credentials to fetch for large requests that require pagination
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token"`
}

func (x *GetCredentialsForRead) Reset() {
	*x = GetCredentialsForRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForRead) ProtoMessage() {}

func (x *GetCredentialsForRead) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForRead.ProtoReflect.Descriptor instead.
func (*GetCredentialsForRead) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{1}
}

func (x *GetCredentialsForRead) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetCredentialsForRead) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetCredentialsForRead) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetCredentialsForWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run for which to fetch artifact write credentials
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// The artifact paths, relative to the Run's artifact root location, for which to
	// fetch artifact write credentials. Must not be empty.
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty" query:"path"`
	// Token specifying the page of credentials to fetch for large requests that require pagination
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty" query:"page_token"`
}

func (x *GetCredentialsForWrite) Reset() {
	*x = GetCredentialsForWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForWrite) ProtoMessage() {}

func (x *GetCredentialsForWrite) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForWrite.ProtoReflect.Descriptor instead.
func (*GetCredentialsForWrite) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{2}
}

func (x *GetCredentialsForWrite) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetCredentialsForWrite) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetCredentialsForWrite) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type CreateMultipartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run ID
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// Artifact path, relative to the Run's artifact root location (e.g. "path/to/file")
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path"`
	// Number of file parts (chunks of data) to upload in the initiated multipart upload
	NumParts *int64 `protobuf:"varint,3,opt,name=num_parts,json=numParts" json:"num_parts,omitempty" query:"num_parts"`
}

func (x *CreateMultipartUpload) Reset() {
	*x = CreateMultipartUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUpload) ProtoMessage() {}

func (x *CreateMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUpload.ProtoReflect.Descriptor instead.
func (*CreateMultipartUpload) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMultipartUpload) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *CreateMultipartUpload) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CreateMultipartUpload) GetNumParts() int64 {
	if x != nil && x.NumParts != nil {
		return *x.NumParts
	}
	return 0
}

type PartEtag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber *int64  `protobuf:"varint,1,opt,name=part_number,json=partNumber" json:"part_number,omitempty" query:"part_number"`
	Etag       *string `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty" query:"etag"`
}

func (x *PartEtag) Reset() {
	*x = PartEtag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartEtag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartEtag) ProtoMessage() {}

func (x *PartEtag) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartEtag.ProtoReflect.Descriptor instead.
func (*PartEtag) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{4}
}

func (x *PartEtag) GetPartNumber() int64 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *PartEtag) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

type CompleteMultipartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run ID
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// Artifact path, relative to the Run's artifact root location (e.g. "path/to/file")
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path"`
	// ID identifying the multipart upload to complete
	UploadId *string `protobuf:"bytes,3,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id"`
	// A list of file parts uploaded in the multipart upload to complete
	PartEtags []*PartEtag `protobuf:"bytes,4,rep,name=part_etags,json=partEtags" json:"part_etags,omitempty" query:"part_etags"`
}

func (x *CompleteMultipartUpload) Reset() {
	*x = CompleteMultipartUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUpload) ProtoMessage() {}

func (x *CompleteMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUpload.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUpload) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteMultipartUpload) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *CompleteMultipartUpload) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CompleteMultipartUpload) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *CompleteMultipartUpload) GetPartEtags() []*PartEtag {
	if x != nil {
		return x.PartEtags
	}
	return nil
}

type GetPresignedUploadPartUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run ID
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty" query:"run_id"`
	// Atifact path, relative to the Run's artifact root location (e.g. "path/to/file")
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty" query:"path"`
	// ID identifying the multipart upload in which the part is uploaded
	UploadId *string `protobuf:"bytes,3,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id"`
	// Part number
	PartNumber *int64 `protobuf:"varint,4,opt,name=part_number,json=partNumber" json:"part_number,omitempty" query:"part_number"`
}

func (x *GetPresignedUploadPartUrl) Reset() {
	*x = GetPresignedUploadPartUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedUploadPartUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedUploadPartUrl) ProtoMessage() {}

func (x *GetPresignedUploadPartUrl) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedUploadPartUrl.ProtoReflect.Descriptor instead.
func (*GetPresignedUploadPartUrl) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{6}
}

func (x *GetPresignedUploadPartUrl) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetPresignedUploadPartUrl) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *GetPresignedUploadPartUrl) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *GetPresignedUploadPartUrl) GetPartNumber() int64 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

type GetCredentialsForTraceDataDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id"`
}

func (x *GetCredentialsForTraceDataDownload) Reset() {
	*x = GetCredentialsForTraceDataDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForTraceDataDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForTraceDataDownload) ProtoMessage() {}

func (x *GetCredentialsForTraceDataDownload) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForTraceDataDownload.ProtoReflect.Descriptor instead.
func (*GetCredentialsForTraceDataDownload) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{7}
}

func (x *GetCredentialsForTraceDataDownload) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type GetCredentialsForTraceDataUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty" query:"request_id"`
}

func (x *GetCredentialsForTraceDataUpload) Reset() {
	*x = GetCredentialsForTraceDataUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForTraceDataUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForTraceDataUpload) ProtoMessage() {}

func (x *GetCredentialsForTraceDataUpload) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForTraceDataUpload.ProtoReflect.Descriptor instead.
func (*GetCredentialsForTraceDataUpload) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{8}
}

func (x *GetCredentialsForTraceDataUpload) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type ArtifactCredentialInfo_HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP header name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" query:"name"`
	// The HTTP header value
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty" query:"value"`
}

func (x *ArtifactCredentialInfo_HttpHeader) Reset() {
	*x = ArtifactCredentialInfo_HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCredentialInfo_HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCredentialInfo_HttpHeader) ProtoMessage() {}

func (x *ArtifactCredentialInfo_HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCredentialInfo_HttpHeader.ProtoReflect.Descriptor instead.
func (*ArtifactCredentialInfo_HttpHeader) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ArtifactCredentialInfo_HttpHeader) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArtifactCredentialInfo_HttpHeader) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GetCredentialsForRead_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials for reading from the specified artifact locations
	CredentialInfos []*ArtifactCredentialInfo `protobuf:"bytes,2,rep,name=credential_infos,json=credentialInfos" json:"credential_infos,omitempty" query:"credential_infos"`
	// Token used to fetch the next page of credentials for large requests that require pagination
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token"`
}

func (x *GetCredentialsForRead_Response) Reset() {
	*x = GetCredentialsForRead_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForRead_Response) ProtoMessage() {}

func (x *GetCredentialsForRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForRead_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForRead_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetCredentialsForRead_Response) GetCredentialInfos() []*ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfos
	}
	return nil
}

func (x *GetCredentialsForRead_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetCredentialsForWrite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials for writing to the specified artifact locations
	CredentialInfos []*ArtifactCredentialInfo `protobuf:"bytes,2,rep,name=credential_infos,json=credentialInfos" json:"credential_infos,omitempty" query:"credential_infos"`
	// Token used to fetch the next page of credentials for large requests that require pagination
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty" query:"next_page_token"`
}

func (x *GetCredentialsForWrite_Response) Reset() {
	*x = GetCredentialsForWrite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForWrite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForWrite_Response) ProtoMessage() {}

func (x *GetCredentialsForWrite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForWrite_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForWrite_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetCredentialsForWrite_Response) GetCredentialInfos() []*ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfos
	}
	return nil
}

func (x *GetCredentialsForWrite_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type CreateMultipartUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID identifying the initiated multipart upload
	UploadId *string `protobuf:"bytes,1,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id"`
	// Credentials for uploading file parts in the initiated multipart upload
	UploadCredentialInfos []*ArtifactCredentialInfo `protobuf:"bytes,2,rep,name=upload_credential_infos,json=uploadCredentialInfos" json:"upload_credential_infos,omitempty" query:"upload_credential_infos"`
	// Credential for aborting the initiated multipart upload
	AbortCredentialInfo *ArtifactCredentialInfo `protobuf:"bytes,3,opt,name=abort_credential_info,json=abortCredentialInfo" json:"abort_credential_info,omitempty" query:"abort_credential_info"`
}

func (x *CreateMultipartUpload_Response) Reset() {
	*x = CreateMultipartUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUpload_Response) ProtoMessage() {}

func (x *CreateMultipartUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUpload_Response.ProtoReflect.Descriptor instead.
func (*CreateMultipartUpload_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CreateMultipartUpload_Response) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *CreateMultipartUpload_Response) GetUploadCredentialInfos() []*ArtifactCredentialInfo {
	if x != nil {
		return x.UploadCredentialInfos
	}
	return nil
}

func (x *CreateMultipartUpload_Response) GetAbortCredentialInfo() *ArtifactCredentialInfo {
	if x != nil {
		return x.AbortCredentialInfo
	}
	return nil
}

type CompleteMultipartUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteMultipartUpload_Response) Reset() {
	*x = CompleteMultipartUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUpload_Response) ProtoMessage() {}

func (x *CompleteMultipartUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUpload_Response.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUpload_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{5, 0}
}

type GetPresignedUploadPartUrl_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credential for uploading the part
	UploadCredentialInfo *ArtifactCredentialInfo `protobuf:"bytes,1,opt,name=upload_credential_info,json=uploadCredentialInfo" json:"upload_credential_info,omitempty" query:"upload_credential_info"`
}

func (x *GetPresignedUploadPartUrl_Response) Reset() {
	*x = GetPresignedUploadPartUrl_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedUploadPartUrl_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedUploadPartUrl_Response) ProtoMessage() {}

func (x *GetPresignedUploadPartUrl_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedUploadPartUrl_Response.ProtoReflect.Descriptor instead.
func (*GetPresignedUploadPartUrl_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetPresignedUploadPartUrl_Response) GetUploadCredentialInfo() *ArtifactCredentialInfo {
	if x != nil {
		return x.UploadCredentialInfo
	}
	return nil
}

type GetCredentialsForTraceDataDownload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialInfo *ArtifactCredentialInfo `protobuf:"bytes,1,opt,name=credential_info,json=credentialInfo" json:"credential_info,omitempty" query:"credential_info"`
}

func (x *GetCredentialsForTraceDataDownload_Response) Reset() {
	*x = GetCredentialsForTraceDataDownload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForTraceDataDownload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForTraceDataDownload_Response) ProtoMessage() {}

func (x *GetCredentialsForTraceDataDownload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForTraceDataDownload_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForTraceDataDownload_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetCredentialsForTraceDataDownload_Response) GetCredentialInfo() *ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfo
	}
	return nil
}

type GetCredentialsForTraceDataUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialInfo *ArtifactCredentialInfo `protobuf:"bytes,1,opt,name=credential_info,json=credentialInfo" json:"credential_info,omitempty" query:"credential_info"`
}

func (x *GetCredentialsForTraceDataUpload_Response) Reset() {
	*x = GetCredentialsForTraceDataUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForTraceDataUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForTraceDataUpload_Response) ProtoMessage() {}

func (x *GetCredentialsForTraceDataUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForTraceDataUpload_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForTraceDataUpload_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetCredentialsForTraceDataUpload_Response) GetCredentialInfo() *ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfo
	}
	return nil
}

var File_databricks_artifacts_proto protoreflect.FileDescriptor

var file_databricks_artifacts_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02,
	0x0a, 0x16, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x72, 0x69, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x36, 0x0a, 0x0a, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x83, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xcc, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86,
	0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x83, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b,
	0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x0a,
	0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9f, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x73, 0x1a, 0xd3,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x52, 0x0a, 0x15, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x13, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3f, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x45, 0x74, 0x61, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x22, 0x88, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x45, 0x74, 0x61, 0x67, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x45,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x0a, 0x2f, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd6,
	0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86,
	0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x60, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x1a, 0x53, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x5c, 0xe2, 0x3f, 0x59, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x73, 0x0a, 0x16, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x41, 0x53, 0x5f, 0x55, 0x52, 0x49, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43, 0x50, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x4c, 0x53, 0x5f, 0x47, 0x45, 0x4e, 0x32, 0x5f, 0x53,
	0x41, 0x53, 0x5f, 0x55, 0x52, 0x49, 0x10, 0x04, 0x32, 0x8b, 0x0a, 0x0a, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x15, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0xf2, 0x86, 0x19, 0x38, 0x0a, 0x34, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x66, 0x6f, 0x72, 0x2d,
	0x72, 0x65, 0x61, 0x64, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x12, 0xa0, 0x01, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x27, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0xf2, 0x86, 0x19, 0x39, 0x0a, 0x35, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x27,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x66, 0x6f,
	0x72, 0x2d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x12,
	0x9f, 0x01, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3f, 0xf2, 0x86, 0x19, 0x3b, 0x0a, 0x37, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x29,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x2d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10,
	0x03, 0x12, 0xa7, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x28,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0xf2, 0x86, 0x19, 0x3d, 0x0a, 0x39,
	0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x2b, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x2d, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x12, 0xb0, 0x01, 0x0a, 0x19,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0x2a, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xf2, 0x86, 0x19, 0x40, 0x0a, 0x3c,
	0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x2f, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x70, 0x61,
	0x72, 0x74, 0x2d, 0x75, 0x72, 0x6c, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x12, 0xd5,
	0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x33, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0xf2, 0x86, 0x19, 0x4a, 0x0a, 0x46, 0x0a, 0x03,
	0x47, 0x45, 0x54, 0x12, 0x39, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x66, 0x6f, 0x72,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x12, 0xcd, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x31, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0xf2, 0x86, 0x19, 0x48, 0x0a, 0x44,
	0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x37, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x66,
	0x6f, 0x72, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x10, 0x03, 0x42, 0x2c, 0xe2, 0x3f, 0x02, 0x10, 0x01, 0x0a, 0x1f, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x90, 0x01,
	0x01, 0xa0, 0x01, 0x01,
}

var (
	file_databricks_artifacts_proto_rawDescOnce sync.Once
	file_databricks_artifacts_proto_rawDescData = file_databricks_artifacts_proto_rawDesc
)

func file_databricks_artifacts_proto_rawDescGZIP() []byte {
	file_databricks_artifacts_proto_rawDescOnce.Do(func() {
		file_databricks_artifacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_databricks_artifacts_proto_rawDescData)
	})
	return file_databricks_artifacts_proto_rawDescData
}

var file_databricks_artifacts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_databricks_artifacts_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_databricks_artifacts_proto_goTypes = []interface{}{
	(ArtifactCredentialType)(0),                         // 0: mlflow.ArtifactCredentialType
	(*ArtifactCredentialInfo)(nil),                      // 1: mlflow.ArtifactCredentialInfo
	(*GetCredentialsForRead)(nil),                       // 2: mlflow.GetCredentialsForRead
	(*GetCredentialsForWrite)(nil),                      // 3: mlflow.GetCredentialsForWrite
	(*CreateMultipartUpload)(nil),                       // 4: mlflow.CreateMultipartUpload
	(*PartEtag)(nil),                                    // 5: mlflow.PartEtag
	(*CompleteMultipartUpload)(nil),                     // 6: mlflow.CompleteMultipartUpload
	(*GetPresignedUploadPartUrl)(nil),                   // 7: mlflow.GetPresignedUploadPartUrl
	(*GetCredentialsForTraceDataDownload)(nil),          // 8: mlflow.GetCredentialsForTraceDataDownload
	(*GetCredentialsForTraceDataUpload)(nil),            // 9: mlflow.GetCredentialsForTraceDataUpload
	(*ArtifactCredentialInfo_HttpHeader)(nil),           // 10: mlflow.ArtifactCredentialInfo.HttpHeader
	(*GetCredentialsForRead_Response)(nil),              // 11: mlflow.GetCredentialsForRead.Response
	(*GetCredentialsForWrite_Response)(nil),             // 12: mlflow.GetCredentialsForWrite.Response
	(*CreateMultipartUpload_Response)(nil),              // 13: mlflow.CreateMultipartUpload.Response
	(*CompleteMultipartUpload_Response)(nil),            // 14: mlflow.CompleteMultipartUpload.Response
	(*GetPresignedUploadPartUrl_Response)(nil),          // 15: mlflow.GetPresignedUploadPartUrl.Response
	(*GetCredentialsForTraceDataDownload_Response)(nil), // 16: mlflow.GetCredentialsForTraceDataDownload.Response
	(*GetCredentialsForTraceDataUpload_Response)(nil),   // 17: mlflow.GetCredentialsForTraceDataUpload.Response
}
var file_databricks_artifacts_proto_depIdxs = []int32{
	10, // 0: mlflow.ArtifactCredentialInfo.headers:type_name -> mlflow.ArtifactCredentialInfo.HttpHeader
	0,  // 1: mlflow.ArtifactCredentialInfo.type:type_name -> mlflow.ArtifactCredentialType
	5,  // 2: mlflow.CompleteMultipartUpload.part_etags:type_name -> mlflow.PartEtag
	1,  // 3: mlflow.GetCredentialsForRead.Response.credential_infos:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 4: mlflow.GetCredentialsForWrite.Response.credential_infos:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 5: mlflow.CreateMultipartUpload.Response.upload_credential_infos:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 6: mlflow.CreateMultipartUpload.Response.abort_credential_info:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 7: mlflow.GetPresignedUploadPartUrl.Response.upload_credential_info:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 8: mlflow.GetCredentialsForTraceDataDownload.Response.credential_info:type_name -> mlflow.ArtifactCredentialInfo
	1,  // 9: mlflow.GetCredentialsForTraceDataUpload.Response.credential_info:type_name -> mlflow.ArtifactCredentialInfo
	2,  // 10: mlflow.DatabricksMlflowArtifactsService.getCredentialsForRead:input_type -> mlflow.GetCredentialsForRead
	3,  // 11: mlflow.DatabricksMlflowArtifactsService.getCredentialsForWrite:input_type -> mlflow.GetCredentialsForWrite
	4,  // 12: mlflow.DatabricksMlflowArtifactsService.createMultipartUpload:input_type -> mlflow.CreateMultipartUpload
	6,  // 13: mlflow.DatabricksMlflowArtifactsService.completeMultipartUpload:input_type -> mlflow.CompleteMultipartUpload
	7,  // 14: mlflow.DatabricksMlflowArtifactsService.getPresignedUploadPartUrl:input_type -> mlflow.GetPresignedUploadPartUrl
	8,  // 15: mlflow.DatabricksMlflowArtifactsService.getCredentialsForTraceDataDownload:input_type -> mlflow.GetCredentialsForTraceDataDownload
	9,  // 16: mlflow.DatabricksMlflowArtifactsService.getCredentialsForTraceDataUpload:input_type -> mlflow.GetCredentialsForTraceDataUpload
	11, // 17: mlflow.DatabricksMlflowArtifactsService.getCredentialsForRead:output_type -> mlflow.GetCredentialsForRead.Response
	12, // 18: mlflow.DatabricksMlflowArtifactsService.getCredentialsForWrite:output_type -> mlflow.GetCredentialsForWrite.Response
	13, // 19: mlflow.DatabricksMlflowArtifactsService.createMultipartUpload:output_type -> mlflow.CreateMultipartUpload.Response
	14, // 20: mlflow.DatabricksMlflowArtifactsService.completeMultipartUpload:output_type -> mlflow.CompleteMultipartUpload.Response
	15, // 21: mlflow.DatabricksMlflowArtifactsService.getPresignedUploadPartUrl:output_type -> mlflow.GetPresignedUploadPartUrl.Response
	16, // 22: mlflow.DatabricksMlflowArtifactsService.getCredentialsForTraceDataDownload:output_type -> mlflow.GetCredentialsForTraceDataDownload.Response
	17, // 23: mlflow.DatabricksMlflowArtifactsService.getCredentialsForTraceDataUpload:output_type -> mlflow.GetCredentialsForTraceDataUpload.Response
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_databricks_artifacts_proto_init() }
func file_databricks_artifacts_proto_init() {
	if File_databricks_artifacts_proto != nil {
		return
	}
	file_databricks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_databricks_artifacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCredentialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartEtag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedUploadPartUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForTraceDataDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForTraceDataUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCredentialInfo_HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForRead_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForWrite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedUploadPartUrl_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForTraceDataDownload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForTraceDataUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_databricks_artifacts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_databricks_artifacts_proto_goTypes,
		DependencyIndexes: file_databricks_artifacts_proto_depIdxs,
		EnumInfos:         file_databricks_artifacts_proto_enumTypes,
		MessageInfos:      file_databricks_artifacts_proto_msgTypes,
	}.Build()
	File_databricks_artifacts_proto = out.File
	file_databricks_artifacts_proto_rawDesc = nil
	file_databricks_artifacts_proto_goTypes = nil
	file_databricks_artifacts_proto_depIdxs = nil
}
