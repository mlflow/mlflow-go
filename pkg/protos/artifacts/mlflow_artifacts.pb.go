// This proto file defines the MLflow Artifacts Service that provides the following REST APIs
// for proxied artifact operations:
// - /mlflow-artifacts/artifacts/<artifact_path> GET: Download an artifact
// - /mlflow-artifacts/artifacts/<artifact_path> PUT: Upload an artifact
// - /mlflow-artifacts/artifact?path=<value> GET: List artifacts

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: mlflow_artifacts.proto

package artifacts

import (
	_ "github.com/mlflow/mlflow-go/pkg/protos"
	_ "github.com/mlflow/mlflow-go/pkg/protos/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DownloadArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DownloadArtifact) Reset() {
	*x = DownloadArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadArtifact) ProtoMessage() {}

func (x *DownloadArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadArtifact.ProtoReflect.Descriptor instead.
func (*DownloadArtifact) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{0}
}

type UploadArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadArtifact) Reset() {
	*x = UploadArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadArtifact) ProtoMessage() {}

func (x *UploadArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadArtifact.ProtoReflect.Descriptor instead.
func (*UploadArtifact) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{1}
}

type ListArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter artifacts matching this path (a relative path from the root artifact directory).
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
}

func (x *ListArtifacts) Reset() {
	*x = ListArtifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifacts) ProtoMessage() {}

func (x *ListArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifacts.ProtoReflect.Descriptor instead.
func (*ListArtifacts) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{2}
}

func (x *ListArtifacts) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type DeleteArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteArtifact) Reset() {
	*x = DeleteArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtifact) ProtoMessage() {}

func (x *DeleteArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtifact.ProtoReflect.Descriptor instead.
func (*DeleteArtifact) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{3}
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path relative to the root artifact directory run.
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	// Whether the path is a directory.
	IsDir *bool `protobuf:"varint,2,opt,name=is_dir,json=isDir" json:"is_dir,omitempty" query:"is_dir" params:"is_dir"`
	// Size in bytes. Unset for directories.
	FileSize *int64 `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty" query:"file_size" params:"file_size"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{4}
}

func (x *FileInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil && x.IsDir != nil {
		return *x.IsDir
	}
	return false
}

func (x *FileInfo) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type CreateMultipartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	NumParts *int64  `protobuf:"varint,2,opt,name=num_parts,json=numParts" json:"num_parts,omitempty" query:"num_parts" params:"num_parts"`
}

func (x *CreateMultipartUpload) Reset() {
	*x = CreateMultipartUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUpload) ProtoMessage() {}

func (x *CreateMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUpload.ProtoReflect.Descriptor instead.
func (*CreateMultipartUpload) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMultipartUpload) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CreateMultipartUpload) GetNumParts() int64 {
	if x != nil && x.NumParts != nil {
		return *x.NumParts
	}
	return 0
}

type CompleteMultipartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *string                `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	UploadId *string                `protobuf:"bytes,2,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id" params:"upload_id"`
	Parts    []*MultipartUploadPart `protobuf:"bytes,3,rep,name=parts" json:"parts,omitempty" query:"parts" params:"parts"`
}

func (x *CompleteMultipartUpload) Reset() {
	*x = CompleteMultipartUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUpload) ProtoMessage() {}

func (x *CompleteMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUpload.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUpload) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{6}
}

func (x *CompleteMultipartUpload) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CompleteMultipartUpload) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *CompleteMultipartUpload) GetParts() []*MultipartUploadPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type AbortMultipartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty" query:"path" params:"path"`
	UploadId *string `protobuf:"bytes,2,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id" params:"upload_id"`
}

func (x *AbortMultipartUpload) Reset() {
	*x = AbortMultipartUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortMultipartUpload) ProtoMessage() {}

func (x *AbortMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortMultipartUpload.ProtoReflect.Descriptor instead.
func (*AbortMultipartUpload) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{7}
}

func (x *AbortMultipartUpload) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *AbortMultipartUpload) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

type MultipartUploadCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        *string           `protobuf:"bytes,1,opt,name=url" json:"url,omitempty" query:"url" params:"url"`
	PartNumber *int64            `protobuf:"varint,2,opt,name=part_number,json=partNumber" json:"part_number,omitempty" query:"part_number" params:"part_number"`
	Headers    map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" query:"headers" params:"headers"`
}

func (x *MultipartUploadCredential) Reset() {
	*x = MultipartUploadCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadCredential) ProtoMessage() {}

func (x *MultipartUploadCredential) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadCredential.ProtoReflect.Descriptor instead.
func (*MultipartUploadCredential) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{8}
}

func (x *MultipartUploadCredential) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *MultipartUploadCredential) GetPartNumber() int64 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *MultipartUploadCredential) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type MultipartUploadPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber *int64  `protobuf:"varint,1,opt,name=part_number,json=partNumber" json:"part_number,omitempty" query:"part_number" params:"part_number"`
	Etag       *string `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty" query:"etag" params:"etag"`
	Url        *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty" query:"url" params:"url"`
}

func (x *MultipartUploadPart) Reset() {
	*x = MultipartUploadPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadPart) ProtoMessage() {}

func (x *MultipartUploadPart) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadPart.ProtoReflect.Descriptor instead.
func (*MultipartUploadPart) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{9}
}

func (x *MultipartUploadPart) GetPartNumber() int64 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *MultipartUploadPart) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *MultipartUploadPart) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type DownloadArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DownloadArtifact_Response) Reset() {
	*x = DownloadArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadArtifact_Response) ProtoMessage() {}

func (x *DownloadArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadArtifact_Response.ProtoReflect.Descriptor instead.
func (*DownloadArtifact_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{0, 0}
}

type UploadArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadArtifact_Response) Reset() {
	*x = UploadArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadArtifact_Response) ProtoMessage() {}

func (x *UploadArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadArtifact_Response.ProtoReflect.Descriptor instead.
func (*UploadArtifact_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{1, 0}
}

type ListArtifacts_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File location and metadata for artifacts.
	Files []*FileInfo `protobuf:"bytes,1,rep,name=files" json:"files,omitempty" query:"files" params:"files"`
}

func (x *ListArtifacts_Response) Reset() {
	*x = ListArtifacts_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifacts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifacts_Response) ProtoMessage() {}

func (x *ListArtifacts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifacts_Response.ProtoReflect.Descriptor instead.
func (*ListArtifacts_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListArtifacts_Response) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type DeleteArtifact_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteArtifact_Response) Reset() {
	*x = DeleteArtifact_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArtifact_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtifact_Response) ProtoMessage() {}

func (x *DeleteArtifact_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtifact_Response.ProtoReflect.Descriptor instead.
func (*DeleteArtifact_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{3, 0}
}

type CreateMultipartUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadId    *string                      `protobuf:"bytes,1,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty" query:"upload_id" params:"upload_id"`
	Credentials []*MultipartUploadCredential `protobuf:"bytes,2,rep,name=credentials" json:"credentials,omitempty" query:"credentials" params:"credentials"`
}

func (x *CreateMultipartUpload_Response) Reset() {
	*x = CreateMultipartUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultipartUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultipartUpload_Response) ProtoMessage() {}

func (x *CreateMultipartUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultipartUpload_Response.ProtoReflect.Descriptor instead.
func (*CreateMultipartUpload_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CreateMultipartUpload_Response) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *CreateMultipartUpload_Response) GetCredentials() []*MultipartUploadCredential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CompleteMultipartUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteMultipartUpload_Response) Reset() {
	*x = CompleteMultipartUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMultipartUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMultipartUpload_Response) ProtoMessage() {}

func (x *CompleteMultipartUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMultipartUpload_Response.ProtoReflect.Descriptor instead.
func (*CompleteMultipartUpload_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{6, 0}
}

type AbortMultipartUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbortMultipartUpload_Response) Reset() {
	*x = AbortMultipartUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlflow_artifacts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortMultipartUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortMultipartUpload_Response) ProtoMessage() {}

func (x *AbortMultipartUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mlflow_artifacts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortMultipartUpload_Response.ProtoReflect.Descriptor instead.
func (*AbortMultipartUpload_Response) Descriptor() ([]byte, []int) {
	return file_mlflow_artifacts_proto_rawDescGZIP(), []int{7, 0}
}

var File_mlflow_artifacts_proto protoreflect.FileDescriptor

var file_mlflow_artifacts_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x61, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x1a, 0x76, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x53, 0x0a, 0x14, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x32, 0x99, 0x0b, 0x0a, 0x16, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbd,
	0x01, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0xf2, 0x86, 0x19, 0x54, 0x0a, 0x3d, 0x0a, 0x03, 0x47, 0x45,
	0x54, 0x12, 0x30, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x3c,
	0x70, 0x61, 0x74, 0x68, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x3e, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x11, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0xb5,
	0x01, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x20, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0xf2, 0x86, 0x19, 0x52, 0x0a, 0x3d, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x12, 0x30, 0x2f, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x3c, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x3e, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x28, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x40, 0xf2, 0x86, 0x19, 0x3c, 0x0a, 0x28, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x12, 0x1b, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0xf2, 0x86, 0x19, 0x56, 0x0a, 0x40, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x30, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x3c, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x3e, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x12, 0xe0, 0x01, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x30, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0xf2, 0x86, 0x19, 0x68, 0x0a, 0x3f, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x12, 0x31, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x75, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x3c, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x3e, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x20, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0xea, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x29, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x32, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0xf2, 0x86, 0x19, 0x6c, 0x0a, 0x41, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x33, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x6d, 0x70, 0x75, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x3c, 0x70,
	0x61, 0x74, 0x68, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x3e, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x25, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0xdb, 0x01, 0x0a, 0x14, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x2f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0xf2, 0x86, 0x19, 0x66, 0x0a, 0x3e, 0x0a, 0x04, 0x50, 0x4f, 0x53,
	0x54, 0x12, 0x30, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x75, 0x2f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x2f, 0x3c,
	0x70, 0x61, 0x74, 0x68, 0x3a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x3e, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x22, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x20, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x1e, 0xe2, 0x3f, 0x02, 0x10, 0x01, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x90, 0x01, 0x01,
}

var (
	file_mlflow_artifacts_proto_rawDescOnce sync.Once
	file_mlflow_artifacts_proto_rawDescData = file_mlflow_artifacts_proto_rawDesc
)

func file_mlflow_artifacts_proto_rawDescGZIP() []byte {
	file_mlflow_artifacts_proto_rawDescOnce.Do(func() {
		file_mlflow_artifacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_mlflow_artifacts_proto_rawDescData)
	})
	return file_mlflow_artifacts_proto_rawDescData
}

var file_mlflow_artifacts_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_mlflow_artifacts_proto_goTypes = []interface{}{
	(*DownloadArtifact)(nil),                 // 0: mlflow.artifacts.DownloadArtifact
	(*UploadArtifact)(nil),                   // 1: mlflow.artifacts.UploadArtifact
	(*ListArtifacts)(nil),                    // 2: mlflow.artifacts.ListArtifacts
	(*DeleteArtifact)(nil),                   // 3: mlflow.artifacts.DeleteArtifact
	(*FileInfo)(nil),                         // 4: mlflow.artifacts.FileInfo
	(*CreateMultipartUpload)(nil),            // 5: mlflow.artifacts.CreateMultipartUpload
	(*CompleteMultipartUpload)(nil),          // 6: mlflow.artifacts.CompleteMultipartUpload
	(*AbortMultipartUpload)(nil),             // 7: mlflow.artifacts.AbortMultipartUpload
	(*MultipartUploadCredential)(nil),        // 8: mlflow.artifacts.MultipartUploadCredential
	(*MultipartUploadPart)(nil),              // 9: mlflow.artifacts.MultipartUploadPart
	(*DownloadArtifact_Response)(nil),        // 10: mlflow.artifacts.DownloadArtifact.Response
	(*UploadArtifact_Response)(nil),          // 11: mlflow.artifacts.UploadArtifact.Response
	(*ListArtifacts_Response)(nil),           // 12: mlflow.artifacts.ListArtifacts.Response
	(*DeleteArtifact_Response)(nil),          // 13: mlflow.artifacts.DeleteArtifact.Response
	(*CreateMultipartUpload_Response)(nil),   // 14: mlflow.artifacts.CreateMultipartUpload.Response
	(*CompleteMultipartUpload_Response)(nil), // 15: mlflow.artifacts.CompleteMultipartUpload.Response
	(*AbortMultipartUpload_Response)(nil),    // 16: mlflow.artifacts.AbortMultipartUpload.Response
	nil,                                      // 17: mlflow.artifacts.MultipartUploadCredential.HeadersEntry
}
var file_mlflow_artifacts_proto_depIdxs = []int32{
	9,  // 0: mlflow.artifacts.CompleteMultipartUpload.parts:type_name -> mlflow.artifacts.MultipartUploadPart
	17, // 1: mlflow.artifacts.MultipartUploadCredential.headers:type_name -> mlflow.artifacts.MultipartUploadCredential.HeadersEntry
	4,  // 2: mlflow.artifacts.ListArtifacts.Response.files:type_name -> mlflow.artifacts.FileInfo
	8,  // 3: mlflow.artifacts.CreateMultipartUpload.Response.credentials:type_name -> mlflow.artifacts.MultipartUploadCredential
	0,  // 4: mlflow.artifacts.MlflowArtifactsService.downloadArtifact:input_type -> mlflow.artifacts.DownloadArtifact
	1,  // 5: mlflow.artifacts.MlflowArtifactsService.uploadArtifact:input_type -> mlflow.artifacts.UploadArtifact
	2,  // 6: mlflow.artifacts.MlflowArtifactsService.listArtifacts:input_type -> mlflow.artifacts.ListArtifacts
	3,  // 7: mlflow.artifacts.MlflowArtifactsService.deleteArtifact:input_type -> mlflow.artifacts.DeleteArtifact
	5,  // 8: mlflow.artifacts.MlflowArtifactsService.createMultipartUpload:input_type -> mlflow.artifacts.CreateMultipartUpload
	6,  // 9: mlflow.artifacts.MlflowArtifactsService.completeMultipartUpload:input_type -> mlflow.artifacts.CompleteMultipartUpload
	7,  // 10: mlflow.artifacts.MlflowArtifactsService.abortMultipartUpload:input_type -> mlflow.artifacts.AbortMultipartUpload
	10, // 11: mlflow.artifacts.MlflowArtifactsService.downloadArtifact:output_type -> mlflow.artifacts.DownloadArtifact.Response
	11, // 12: mlflow.artifacts.MlflowArtifactsService.uploadArtifact:output_type -> mlflow.artifacts.UploadArtifact.Response
	12, // 13: mlflow.artifacts.MlflowArtifactsService.listArtifacts:output_type -> mlflow.artifacts.ListArtifacts.Response
	13, // 14: mlflow.artifacts.MlflowArtifactsService.deleteArtifact:output_type -> mlflow.artifacts.DeleteArtifact.Response
	14, // 15: mlflow.artifacts.MlflowArtifactsService.createMultipartUpload:output_type -> mlflow.artifacts.CreateMultipartUpload.Response
	15, // 16: mlflow.artifacts.MlflowArtifactsService.completeMultipartUpload:output_type -> mlflow.artifacts.CompleteMultipartUpload.Response
	16, // 17: mlflow.artifacts.MlflowArtifactsService.abortMultipartUpload:output_type -> mlflow.artifacts.AbortMultipartUpload.Response
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_mlflow_artifacts_proto_init() }
func file_mlflow_artifacts_proto_init() {
	if File_mlflow_artifacts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mlflow_artifacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortMultipartUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifacts_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArtifact_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultipartUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMultipartUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlflow_artifacts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortMultipartUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mlflow_artifacts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mlflow_artifacts_proto_goTypes,
		DependencyIndexes: file_mlflow_artifacts_proto_depIdxs,
		MessageInfos:      file_mlflow_artifacts_proto_msgTypes,
	}.Build()
	File_mlflow_artifacts_proto = out.File
	file_mlflow_artifacts_proto_rawDesc = nil
	file_mlflow_artifacts_proto_goTypes = nil
	file_mlflow_artifacts_proto_depIdxs = nil
}
